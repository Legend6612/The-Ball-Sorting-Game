import pygame
import sys
import random
import time
import os

# Initialize Pygame
pygame.init()

# Set up the display
WIDTH = 600
HEIGHT = 600
WINDOW = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Ball Sorting Game")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
GRAY = (200, 200, 200)
GREEN = (0, 255, 0)  # For buttons
PURPLE = (128, 0, 128)
ORANGE = (255, 165, 0)

# Define levels (adjusted to ensure at least one empty compartment)
LEVELS = [
    {"colors": [RED, BLUE, YELLOW], "balls_per_color": 2, "compartments": 4},  # Level 1: 3 colors, 2 balls each (6 balls), 4 compartments
    {"colors": [RED, BLUE, YELLOW, PURPLE], "balls_per_color": 2, "compartments": 5},  # Level 2: 4 colors, 2 balls each (8 balls), 5 compartments
    {"colors": [RED, BLUE, YELLOW, PURPLE], "balls_per_color": 3, "compartments": 5},  # Level 3: 4 colors, 3 balls each (12 balls), 5 compartments
    {"colors": [RED, BLUE, YELLOW, PURPLE, ORANGE], "balls_per_color": 3, "compartments": 6},  # Level 4: 5 colors, 3 balls each (15 balls), 6 compartments
    {"colors": [RED, BLUE, YELLOW, PURPLE, ORANGE], "balls_per_color": 4, "compartments": 6},  # Level 5: 5 colors, 4 balls each (20 balls), 6 compartments
]

# Load assets with absolute paths
BASE_PATH = r"C:\Users\me\Documents\python"
try:
    BACKGROUND = pygame.image.load(os.path.join(BASE_PATH, "background.png"))
    BACKGROUND = pygame.transform.scale(BACKGROUND, (WIDTH, HEIGHT))
except:
    print("Could not load background.png, using white background instead")
    BACKGROUND = None

try:
    BOX_IMAGE = pygame.image.load(os.path.join(BASE_PATH, "loanbox.png"))
    BOX_IMAGE = pygame.transform.scale(BOX_IMAGE, (100, 100))
except:
    print("Could not load loanbox.png, using default rectangles instead")
    BOX_IMAGE = None

try:
    LOGO = pygame.image.load(os.path.join(BASE_PATH, "super_seed_logo.png"))
    LOGO = pygame.transform.scale(LOGO, (200, 50))
except:
    print("Could not load super_seed_logo.png, skipping logo")
    LOGO = None

# Game settings
COMPARTMENT_SIZE = 100
BALL_RADIUS = 20
TIME_LIMIT = 180  # 3 minutes in seconds

# Font for timer and messages
FONT = pygame.font.SysFont("Arial", 30)
NOTIFICATION_FONT = pygame.font.SysFont("Arial", 40)

# Button class
class Button:
    def __init__(self, x, y, width, height, text, color):
        self.rect = pygame.Rect(x, y, width, height)
        self.text = text
        self.color = color
        self.text_surface = FONT.render(text, True, BLACK)

    def draw(self):
        pygame.draw.rect(WINDOW, self.color, self.rect)
        WINDOW.blit(self.text_surface, (self.rect.x + (self.rect.width - self.text_surface.get_width()) // 2,
                                       self.rect.y + (self.rect.height - self.text_surface.get_height()) // 2))

    def is_clicked(self, pos):
        return self.rect.collidepoint(pos)

# Compartment class to hold balls
class Compartment:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.balls = []

    def draw(self):
        # Draw the compartment
        if BOX_IMAGE:
            WINDOW.blit(BOX_IMAGE, (self.x, self.y))
        else:
            pygame.draw.rect(WINDOW, GRAY, (self.x, self.y, COMPARTMENT_SIZE, COMPARTMENT_SIZE), 2)

        # Draw the balls in the compartment
        for i, (color, pos) in enumerate(self.balls):
            ball_x = self.x + COMPARTMENT_SIZE // 2
            ball_y = self.y + COMPARTMENT_SIZE - 30 - (i * 40)
            pygame.draw.circle(WINDOW, color, (ball_x, ball_y), BALL_RADIUS)
            self.balls[i] = (color, (ball_x, ball_y))

    def can_add_ball(self, color):
        return len(self.balls) == 0 or (all(ball[0] == color for ball in self.balls) and len(self.balls) < 5)

    def can_remove_ball(self, color):
        # Allow removing the topmost ball if there is at least one ball
        return len(self.balls) > 0

# Game setup function
def initialize_level(level):
    level_data = LEVELS[level - 1]
    num_compartments = level_data["compartments"]
    compartments = []

    # Dynamically position compartments based on the number of compartments
    if num_compartments == 4:
        # 2x2 grid
        for row in range(2):
            for col in range(2):
                x = col * (COMPARTMENT_SIZE + 50) + 150
                y = row * (COMPARTMENT_SIZE + 50) + 150
                compartments.append(Compartment(x, y))
    elif num_compartments == 5:
        # 3x2 grid with one missing
        positions = [(0, 0), (1, 0), (2, 0), (0, 1), (1, 1)]  # Skip (2, 1)
        for row, col in positions:
            x = col * (COMPARTMENT_SIZE + 20) + 120
            y = row * (COMPARTMENT_SIZE + 50) + 150
            compartments.append(Compartment(x, y))
    elif num_compartments == 6:
        # 3x2 grid
        for row in range(2):
            for col in range(3):
                x = col * (COMPARTMENT_SIZE + 20) + 120
                y = row * (COMPARTMENT_SIZE + 50) + 150
                compartments.append(Compartment(x, y))

    # Place balls randomly, ensuring at least one compartment is empty
    balls = []
    for color in level_data["colors"]:
        for _ in range(level_data["balls_per_color"]):
            balls.append(color)

    random.shuffle(balls)
    num_balls = len(balls)
    num_filled_compartments = min(len(compartments) - 1, (num_balls + 4 - 1) // 4)  # Ensure at least one empty
    for i, ball in enumerate(balls):
        compartment = compartments[i % num_filled_compartments]
        compartment.balls.append((ball, (0, 0)))

    return compartments

# Check if the player is stuck (no valid moves left)
def is_stuck(compartments):
    # Check if there are any empty compartments
    has_empty = any(len(compartment.balls) == 0 for compartment in compartments)
    
    # If there's an empty compartment, the player isn't stuck
    if has_empty:
        return False

    # Check if any ball can be moved to another compartment
    for i, source in enumerate(compartments):
        if not source.balls:
            continue
        top_ball_color = source.balls[-1][0]
        for j, target in enumerate(compartments):
            if i == j:
                continue
            if target.can_add_ball(top_ball_color):
                return False

    return True

# Game variables
current_level = 1
compartments = initialize_level(current_level)
selected_ball = None
following = False  # New flag to track if a ball is following the mouse
start_time = time.time()
game_won = False
time_up = False
game_over = False
win_popup = False
win_time = 0

# Buttons for time-up, win, and game over scenarios
end_button = Button(150, 450, 100, 50, "End Game", GREEN)
restart_button = Button(350, 450, 100, 50, "Restart", GREEN)
next_level_button = Button(200, 350, 100, 50, "Next Level", GREEN)
exit_button = Button(300, 350, 100, 50, "Exit", GREEN)

# Main game loop
clock = pygame.time.Clock()
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN and not game_won and not time_up and not game_over:
            mouse_x, mouse_y = pygame.mouse.get_pos()
            if not following:
                # Check if a ball is clicked to start following
                for compartment in compartments:
                    for i, (color, pos) in enumerate(compartment.balls):
                        if ((mouse_x - pos[0]) ** 2 + (mouse_y - pos[1]) ** 2) <= BALL_RADIUS ** 2:
                            if compartment.can_remove_ball(color):
                                selected_ball = (compartment, i, color)
                                following = True
                                break
                    if following:
                        break
            else:
                # Check if a compartment is clicked to drop the ball
                for target_compartment in compartments:
                    if (target_compartment.x <= mouse_x <= target_compartment.x + COMPARTMENT_SIZE and
                        target_compartment.y <= mouse_y <= target_compartment.y + COMPARTMENT_SIZE):
                        color = selected_ball[2]
                        if target_compartment.can_add_ball(color):
                            ball = selected_ball[0].balls.pop(selected_ball[1])
                            target_compartment.balls.append(ball)
                        else:
                            # Rule violation: Game Over
                            game_over = True
                        selected_ball = None
                        following = False
                        break
                # If clicked outside a compartment, deselect the ball
                if following and not game_over:
                    selected_ball = None
                    following = False
        elif event.type == pygame.MOUSEBUTTONDOWN and (time_up or game_over):
            # Check for button clicks if time is up or game over
            mouse_pos = pygame.mouse.get_pos()
            if end_button.is_clicked(mouse_pos):
                running = False
            elif restart_button.is_clicked(mouse_pos):
                # Reset the game to level 1
                current_level = 1
                compartments = initialize_level(current_level)
                start_time = time.time()
                game_won = False
                time_up = False
                game_over = False
                selected_ball = None
                following = False
        elif event.type == pygame.MOUSEBUTTONDOWN and win_popup:
            # Check for button clicks on win popup
            mouse_pos = pygame.mouse.get_pos()
            if next_level_button.is_clicked(mouse_pos):
                if current_level < len(LEVELS):
                    # Go to next level
                    current_level += 1
                    compartments = initialize_level(current_level)
                    start_time = time.time()
                    game_won = False
                    win_popup = False
                    selected_ball = None
                    following = False
            elif exit_button.is_clicked(mouse_pos):
                running = False

    # Check win condition
    if not game_won and not time_up and not game_over:
        all_sorted = True
        for compartment in compartments:
            if len(compartment.balls) > 0:
                first_color = compartment.balls[0][0]
                if not all(ball[0] == first_color for ball in compartment.balls):
                    all_sorted = False
                    break
        if all_sorted and all(len(compartment.balls) == 0 or len(compartment.balls) == LEVELS[current_level - 1]["balls_per_color"] for compartment in compartments):
            game_won = True
            win_popup = True
            win_time = time.time() - start_time

    # Check time limit
    elapsed_time = time.time() - start_time
    if elapsed_time >= TIME_LIMIT and not game_won and not time_up and not game_over:
        time_up = True

    # Check if the player is stuck
    if not game_won and not time_up and not game_over:
        if is_stuck(compartments):
            game_over = True

    # Draw the background
    if BACKGROUND:
        WINDOW.blit(BACKGROUND, (0, 0))
    else:
        WINDOW.fill(WHITE)

    # Draw the logo
    if LOGO:
        WINDOW.blit(LOGO, (WIDTH // 2 - LOGO.get_width() // 2, 10))

    # Draw compartments and balls
    for compartment in compartments:
        compartment.draw()

    # Draw the selected ball following the mouse
    if following and selected_ball:
        mouse_x, mouse_y = pygame.mouse.get_pos()
        pygame.draw.circle(WINDOW, selected_ball[2], (mouse_x, mouse_y), BALL_RADIUS)

    # Draw the timer or time-up/game-over message
    if not game_won and not time_up and not game_over:
        remaining_time = max(0, TIME_LIMIT - elapsed_time)
        timer_text = FONT.render(f"Level {current_level} | Time: {remaining_time:.2f}s", True, BLACK)
        WINDOW.blit(timer_text, (10, 10))
    elif time_up:
        timer_text = FONT.render("Time's Up!", True, BLACK)
        WINDOW.blit(timer_text, (10, 10))
        end_button.draw()
        restart_button.draw()
    elif game_over:
        notification_rect = pygame.Rect(WIDTH // 2 - 150, HEIGHT // 2 - 100, 300, 200)
        pygame.draw.rect(WINDOW, WHITE, notification_rect)
        pygame.draw.rect(WINDOW, BLACK, notification_rect, 3)
        game_over_message = NOTIFICATION_FONT.render("Game Over!", True, BLACK)
        WINDOW.blit(game_over_message, (WIDTH // 2 - game_over_message.get_width() // 2, HEIGHT // 2 - 80))
        end_button.draw()
        restart_button.draw()

    # Draw win notification box
    if win_popup:
        notification_rect = pygame.Rect(WIDTH // 2 - 150, HEIGHT // 2 - 100, 300, 200)
        pygame.draw.rect(WINDOW, WHITE, notification_rect)
        pygame.draw.rect(WINDOW, BLACK, notification_rect, 3)
        win_message = NOTIFICATION_FONT.render("You Win!", True, BLACK)
        time_message = FONT.render(f"Time: {win_time:.2f}s", True, BLACK)
        WINDOW.blit(win_message, (WIDTH // 2 - win_message.get_width() // 2, HEIGHT // 2 - 80))
        WINDOW.blit(time_message, (WIDTH // 2 - time_message.get_width() // 2, HEIGHT // 2 - 30))
        if current_level < len(LEVELS):
            next_level_button.draw()
        exit_button.draw()

    # Update the display
    pygame.display.flip()
    clock.tick(60)

# Quit the game
pygame.quit()
sys.exit()